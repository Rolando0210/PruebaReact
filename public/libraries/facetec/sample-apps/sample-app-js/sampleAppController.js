SampleApp = (function () {
    var latestEnrollmentIdentifier = "";
    var latestProcessor;
    var latestSessionResult = null;
    var latestIDScanResult = null;
    var selfieImage = null;
    var frontDocumentImage = null;
    var backDocumentImage = null;
    var ocrResult = null;
    var validationCallback;
    var livenessCheckResponseBody = null;
    var biometricValidationResponseBody = null;
    var matchResponseBodyFront = null;
    var matchResponseBodyBack = null;

    function initializeComponent(parameters) {
        SampleAppUtilities.formatUIForDevice();
        // Set the directory path for other FaceTec Browser SDK Resources.
        FaceTecSDK.setResourceDirectory("./libraries/facetec/core-sdk/FaceTecSDK.js/resources");
        // Set the directory path for required FaceTec Browser SDK images.
        FaceTecSDK.setImagesDirectory("./libraries/facetec/core-sdk/FaceTec_images");
        // Initialize FaceTec Browser SDK and configure the UI features.
        Config.initializeFromAutogeneratedConfig(FaceTecSDK, parameters.faceTecConfig.productionKeyText, parameters.customBackendUrl, function (initializedSuccessfully) {
            //console.log("initializedSuccessfully", initializedSuccessfully);
            if (initializedSuccessfully) {
                if (parameters.startInIFrameMode) {
                    var SDKInIFrameFeatureFlag = {ac_ziif: "991d6c1c-5e5c-4e32-89c7-1ddfac46572e"};
                    Config.currentCustomization = new FaceTecSDK.FaceTecCustomization([SDKInIFrameFeatureFlag]);
                }
                // Set the configuration of words by Locate.
                FaceTecSDK.configureLocalization(getFaceTecStrings());
                onFaceTecSDKInitializationSuccess(parameters);
            } else {
                onFaceTecSDKInitializationFailure(parameters);
            }
        });
        SampleAppUtilities.fadeInMainUIContainer();
    }

    function onFaceTecSDKInitializationSuccess(parameters) {
        SampleAppUtilities.enableControlButtons();
        // Set your FaceTec Device SDK Customizations.
        ThemeHelpers.setAppTheme(ThemeHelpers.getCurrentTheme(), parameters.customStyles);
        // Set the sound files that are to be used for Vocal Guidance.
        SampleAppUtilities.setVocalGuidanceSoundFiles();
        // Set the strings to be used for group names, field names, and placeholder texts for the FaceTec ID Scan User OCR Confirmation Screen.
        SampleAppUtilities.setOCRLocalization();
        AdditionalScreens.setServerUpgradeStyling(document.getElementById("controls"), exitAdditionalScreen);
        DeveloperStatusMessages.logInitializeResult();
        parameters.componentInitializedCallback();
    }

    function onFaceTecSDKInitializationFailure(parameters) {
        DeveloperStatusMessages.logInitializeResult();
        parameters.componentNotInitializedCallback();
    }

    function startValidationProcess(parameters) {
        initializeSpecificProcess(parameters);
    }

    function initializeSpecificProcess(parameters) {
        let faceTecConfig = parameters.faceTecConfig;
        if (parameters.authenticationProcess) {
            console.log("onAuthenticateProcess - Authenticate init")
            onAuthenticateProcess(parameters.startValidationCallback, parameters.enrollmentIdentifier, parameters.startInIFrameMode)
        } else if (parameters.regulaFlowActive) {
            console.log("onEnrollmentProcess -  Enrollment init with REGULA")
            onEnrollmentProcess(parameters.startValidationCallback, parameters.startAdditionalValidationProcess, parameters.startInIFrameMode)
        } else if (parameters.checkDocumentOnly) {
            console.log("onPhotoIDMatchOnlyDocumentsProcess - OnlyDocuments init")
            onPhotoIDMatchOnlyDocumentsProcess(parameters.startValidationCallback, parameters.enrollmentIdentifier, parameters.startInIFrameMode, faceTecConfig.documentMinMatchLevel, parameters.latestValidationResult);
        } else {
            console.log("onEnrollmentProcess - Enrollment init")
            onEnrollmentProcess(parameters.startValidationCallback, parameters.startAdditionalValidationProcess, parameters.startInIFrameMode)
            /*console.log("onPhotoIDMatchProcess - Enrolment and OCR init")
            onPhotoIDMatchProcess(parameters.startValidationCallback, parameters.startAdditionalValidationProcess, parameters.startInIFrameMode, faceTecConfig.documentMinMatchLevel);*/
        }
    }

    function getFaceTecStrings() {
        return {
            "FaceTec_action_ok": "OK",
            "FaceTec_action_im_ready": "ESTOY LISTO",
            "FaceTec_action_try_again": "INTENTAR OTRA VEZ",
            "FaceTec_action_continue": "CONTINUAR",
            "FaceTec_action_take_photo": "TOMAR FOTO",
            "FaceTec_action_accept_photo": "ACEPTAR",
            "FaceTec_action_retake_photo": "VOLVER A TOMAR",
            "FaceTec_action_confirm": "CONFIRMAR INFORMACIÓN",

            "FaceTec_accessibility_cancel_button": "Cancelar",
            "FaceTec_accessibility_tap_guidance": "Toque dos veces cualquier parte de la pantalla para ver indicaciones sobre cómo alinear el rostro.",
            "FaceTec_accessibility_key_down_guidance": "Presione Entrar o la barra espaciadora para obtener orientación sobre la alineación de la cara",

            "FaceTec_accessibility_feedback_move_phone_away": "Su rostro está demasiado cerca",
            "FaceTec_accessibility_feedback_move_phone_closer": "Su rostro está demasiado lejos",
            "FaceTec_accessibility_feedback_face_too_far_left": "Su rostro está demasiado a la izquierda",
            "FaceTec_accessibility_feedback_face_too_far_right": "Su rostro está demasiado a la derecha",
            "FaceTec_accessibility_feedback_face_too_low": "Su rostro está demasiado abajo",
            "FaceTec_accessibility_feedback_face_too_high": "Su rostro está demasiado arriba",
            "FaceTec_accessibility_feedback_face_rotated_too_far_left": "Su rostro gira demasiado a la izquierda",
            "FaceTec_accessibility_feedback_face_rotated_too_far_right": "Su rostro gira demasiado a la derecha",
            "FaceTec_accessibility_feedback_face_looking_too_far_left": "Su rostro está demasiado inclinado hacia la izquierda",
            "FaceTec_accessibility_feedback_face_looking_too_far_right": "Su rostro está demasiado inclinado hacia la derecha",
            "FaceTec_accessibility_feedback_face_not_in_camera": "El rostro no se ve en la cámara o está demasiado lejos",
            "FaceTec_accessibility_feedback_hold_phone_to_eye_level": "Mantenga el dispositivo a la altura de los ojos",
            "FaceTec_accessibility_feedback_move_away_web": "Cámara demasiado cerca",
            "FaceTec_accessibility_feedback_move_closer_web": "Cámara demasiado lejos",
            "FaceTec_accessibility_feedback_hold_to_eye_level_web": "Mover la cámara al nivel de los ojos",

            "FaceTec_presession_frame_your_face": "Encuadre su rostro en el óvalo",
            "FaceTec_presession_look_straight_ahead": "Mire hacia el frente",
            "FaceTec_presession_hold_steady3": "Manténgase quieto durante: 3",
            "FaceTec_presession_hold_steady2": "Manténgase quieto durante: 2",
            "FaceTec_presession_hold_steady1": "Manténgase quieto durante: 1",
            "FaceTec_presession_eyes_straight_ahead": "Mire hacia el frente",
            "FaceTec_presession_remove_dark_glasses": "Quítese los lentes oscuros",
            "FaceTec_presession_neutral_expression": "Expresión neutra, sin sonreír",
            "FaceTec_presession_conditions_too_bright": "Demasiada luz",
            "FaceTec_presession_brighten_your_environment": "Ilumine su entorno",

            "FaceTec_feedback_center_face": "Centre su rostro",
            "FaceTec_feedback_face_not_found": "Encuadre su rostro",
            "FaceTec_feedback_move_phone_away": "Aléjate un poco",
            "FaceTec_feedback_move_away_web": "Aléjate un poco",
            "FaceTec_feedback_move_phone_closer": "Acércate un poco",
            "FaceTec_feedback_move_web_closer": "Acércate un poco y rellena el óvalo",
            "FaceTec_feedback_move_web_even_closer": "Aún más cerca",
            "FaceTec_feedback_move_phone_to_eye_level": "Coloque la cámara a la altura de los ojos",
            "FaceTec_feedback_move_to_eye_level_web": "Mira directamente a la cámara",
            "FaceTec_feedback_face_not_looking_straight_ahead": "Mire hacia el frente",
            "FaceTec_feedback_face_not_upright": "Mantenga la cabeza recta",
            "FaceTec_feedback_face_not_upright_mobile": "Mantenga la cabeza recta",
            "FaceTec_feedback_hold_steady": "Quédese quieto",
            "FaceTec_feedback_use_even_lighting": "Ilumine el rostro de forma más uniforme",

            "FaceTec_instructions_header_ready_desktop": "Prepárese para su videoselfie",
            "FaceTec_instructions_header_ready_1_mobile": "Prepárese para",
            "FaceTec_instructions_header_ready_2_mobile": "su videoselfie",
            "FaceTec_instructions_message_ready_desktop": "Encuadre su rostro en el óvalo, Presione \"Estoy listo\" y acérquese",
            "FaceTec_instructions_message_ready_1_mobile": "Encuadre su rostro en el óvalo",
            "FaceTec_instructions_message_ready_2_mobile": "Presione \"Estoy listo\" y acérquese",

            "FaceTec_retry_header": "Reintente nuevamente",
            "FaceTec_retry_subheader_message": "Necesitamos una videoselfie más nítida",
            "FaceTec_retry_your_image_label": "Su selfie",
            "FaceTec_retry_ideal_image_label": "Pose ideal",
            "FaceTec_retry_instruction_message_1": "Use una postura e iluminación ideal",
            "FaceTec_retry_instruction_message_2": "Expresión neutra, sin sonreír",
            "FaceTec_retry_instruction_message_3": "Demasiado borrosa, limpie la cámara",

            "FaceTec_camera_feed_issue_header": "Problema al proteger la conexión de la cámara",
            "FaceTec_camera_feed_issue_header_mobile": "Problema al proteger<br/>la conexión de la cámara",
            "FaceTec_camera_feed_issue_subheader_message_mobile": "Esta aplicación bloquea configuraciones de cámara web sospechosas.<br/><a href='https://livenesscheckhelp.com/' target='_blank' style='text-decoration:underline; font:inherit; pointer-events:all;'>Aprende más aquí.</a>.",
            "FaceTec_camera_feed_issue_subheader_message": "Este sistema no se puede verificar debido a lo siguiente:",
            "FaceTec_camera_feed_issue_table_header_1": "Posible problema",
            "FaceTec_camera_feed_issue_table_header_2": "Corregir",
            "FaceTec_camera_feed_issue_table_row_1_cell_1_firefox_permissions_error": "Permisos de cámara no recordados en Firefox.",
            "FaceTec_camera_feed_issue_table_row_1_cell_2_firefox_permissions_error": "Marque Recordar Permisos.",
            "FaceTec_camera_feed_issue_table_row_1_cell_1": "Cámara ya en uso por otra aplicación.",
            "FaceTec_camera_feed_issue_table_row_1_cell_2": "Cierra la otra aplicación.",
            "FaceTec_camera_feed_issue_table_row_2_cell_1": "Una aplicación 3rd-Party está modificando el video.",
            "FaceTec_camera_feed_issue_table_row_2_cell_2": "Cierre / desinstale la otra aplicación.",
            "FaceTec_camera_feed_issue_table_row_3_cell_1": "Equipos que no pueden ser protegidos.",
            "FaceTec_camera_feed_issue_table_row_3_cell_2": "Usa un dispositivo diferente.",
            "FaceTec_camera_feed_issue_subtable_message": "Esta aplicación bloquea configuraciones de cámara web sospechosas. <a href='https://livenesscheckhelp.com/' target='_blank' style='text-decoration:underline; font:inherit; pointer-events:all;'>Aprende más aquí.</a>.",
            "FaceTec_camera_feed_issue_action": "VOLVER A INTENTARLO",
            "FaceTec_camera_feed_issue_action_firefox_permissions_error": "ACEPTAR",

            "FaceTec_camera_permission_header": "Habilite la cámara",
            "FaceTec_camera_permission_message": "Permisos de cámara deshabilitados.<br/>Verifique la configuración de su sistema operativo y navegador.",

            "FaceTec_enter_fullscreen_header": "Modo Selfie a Pantalla Completa",
            "FaceTec_enter_fullscreen_message": "Antes de comenzar, haga clic en el botón de abajo para abrir el modo de pantalla completa.",
            "FaceTec_enter_fullscreen_action": "ABRIR PANTALLA COMPLETA",

            "FaceTec_initializing_camera": "Encriptando imagen de la cámara...",

            "FaceTec_idscan_type_selection_header": "Prepárate para escanear<br/>tu documento de identidad",
            "FaceTec_idscan_capture_id_front_instruction_message": "Muestra el frente de tu documento",
            "FaceTec_idscan_capture_id_back_instruction_message": "Muestra el posterior de tu documento",
            "FaceTec_idscan_review_id_front_instruction_message": "Confirma que la foto es clara y legible",
            "FaceTec_idscan_review_id_back_instruction_message": "Confirma que la foto es clara y legible",
            "FaceTec_idscan_additional_review_message": "Se requiere<br/>una verificación adicional",
            "FaceTec_idscan_ocr_confirmation_main_header": "Revisar y confirmar",
            "FaceTec_idscan_ocr_confirmation_scroll_message": "Desplácese hacia abajo",
            "FaceTec_idscan_feedback_flip_id_to_back_message": "Posterior de su identificación",

            "FaceTec_result_success_message": "Éxito!",
            "FaceTec_result_facescan_upload_message": "Subiendo<br/>escaneo facial 3D<br/>encriptado",
            "FaceTec_result_idscan_upload_message": "Subiendo<br/>documento de identidad<br/>encriptado",
            "FaceTec_result_idscan_unsuccess_message": "La foto del documento<br/>No concuerda<br>Con el rostro del usuario",
            "FaceTec_result_idscan_success_front_side_message": "Tu rostro 3D<br/>concuerda con tu documento",
            "FaceTec_result_idscan_success_front_side_back_next_message": "Tu rostro 3D<br/>concuerda con tu documento",
            "FaceTec_result_idscan_success_back_side_message": "Posterior del documento<br/>capturado",
            "FaceTec_result_idscan_success_passport_message": "Escaneo de pasaporte completado",
            "FaceTec_result_idscan_success_user_confirmation_message": "Validación de identidad<br/>completada",
            "FaceTec_result_idscan_success_additional_review_message": "Captura de la fotografía de identificación<br/>completada",
            "FaceTec_result_idscan_retry_face_did_not_match_message": "El rostro no coincide<br/>lo suficiente",
            "FaceTec_result_idscan_retry_id_not_fully_visible_message": "La identificación<br/>no es totalmente visible",
            "FaceTec_result_idscan_retry_ocr_results_not_good_enough_message": "El texto de la identificación no es legible",
            "FaceTec_result_idscan_retry_id_type_not_suppported_message": "Tipo de documento no compatible<br/>Por favor, usa un documento diferente",
            "FaceTec_result_idscan_retry_barcode_not_read_message": "No se pudo escanear el código de barras<br/>Inténtelo de nuevo",
        };
    }

    // Clear previous session results;
    function initializeResultObjects() {
        latestSessionResult = null;
        latestIDScanResult = null;
    }

    // Initiate a 3D Liveness Check.
    function onLivenessCheckPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.
        getSessionToken(function (sessionToken) {
            latestProcessor = new LivenessCheckProcessor(sessionToken, SampleApp);
        });
    }

    // Initiate a 3D Liveness Check, then storing the 3D FaceMap in the Database, also known as "Enrollment".  A random enrollmentIdentifier is generated each time to guarantee uniqueness.
    function onEnrollUserPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the Enrollment.
        getSessionToken(function (sessionToken) {
            latestEnrollmentIdentifier = "browser_sample_app_" + SampleAppUtilities.generateUUId();
            latestProcessor = new EnrollmentProcessor(sessionToken, SampleApp);
        });
    }

    // Perform 3D to 3D Authentication against the Enrollment previously performed.
    function onAuthenticateUserPressed() {
        initializeResultObjects();
        // For demonstration purposes, verify that we have an enrollmentIdentifier to Authenticate against.
        if (latestEnrollmentIdentifier.length === 0) {
            DeveloperStatusMessages.logAndDisplayMessage("Please enroll first before trying authentication.");
        } else {
            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
            // Get a Session Token from the FaceTec SDK, then start the 3D to 3D Matching.
            getSessionToken(function (sessionToken) {
                latestProcessor = new AuthenticateProcessor(sessionToken, SampleApp);
            });
        }
    }

    // Perform a 3D Liveness Check, then an ID Scan, then Match the 3D FaceMap to the ID Scan.
    function onPhotoIDMatchPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
        getSessionToken(function (sessionToken) {
            latestEnrollmentIdentifier = "browser_sample_app_" + SampleAppUtilities.generateUUId();
            latestProcessor = new PhotoIDMatchProcessor(sessionToken, SampleApp);
        });
    }

    // Perform Photo ID Scan, generating a username each time to guarantee uniqueness.
    function onPhotoIDScanPressed() {
        initializeResultObjects();
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
        getSessionToken(function (sessionToken) {
            latestProcessor = new PhotoIDScanProcessor(sessionToken, SampleApp);
        });
    }

    // Function to process 3D map by enrollment (/enrollment-3d)
    function onEnrollmentProcess(callback, startAdditionalValidationProcess, startInIFrameMode) {
        //initializeResultObjects();
        validationCallback = callback;
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D to 3D Matching.
        getSessionToken(function (sessionToken) {
            latestEnrollmentIdentifier = "identity_validation_" + SampleAppUtilities.generateUUId();
            latestProcessor = new Enrollment(sessionToken, SampleApp, startAdditionalValidationProcess, startInIFrameMode,
                loadSelfieImage, loadLivenessCheckResponseBody);
        });
    }

    // Function to process 3D map with 3D map by authenticate (/match-3d-3d)
    function onAuthenticateProcess(callback, enrollmentIdentifier, startInIFrameMode) {
        initializeResultObjects();
        validationCallback = callback;
        // For demonstration purposes, verify that we have an enrollmentIdentifier to Authenticate against.
        if (enrollmentIdentifier.length === 0) {
            DeveloperStatusMessages.logAndDisplayMessage("Please enroll first before trying authentication.");
        } else {
            SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
            // Get a Session Token from the FaceTec SDK, then start the 3D to 3D Matching.
            getSessionToken(function (sessionToken) {
                latestEnrollmentIdentifier = enrollmentIdentifier;
                latestProcessor = new Authenticate(sessionToken, SampleApp, startInIFrameMode, enrollmentIdentifier,
                    loadSelfieImage, loadLivenessCheckResponseBody);
            });
        }
    }

    // Function to process 3D map by enrollment and Dni OCR Data (/enrollment-3d, /match-3d-2d-idscan)
    function onPhotoIDMatchProcess(callback, startAdditionalValidationProcess, startInIFrameMode, documentMinMatchLevel) {
        initializeResultObjects();
        validationCallback = callback;
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
        getSessionToken(function (sessionToken) {
            latestEnrollmentIdentifier = "identity_validation_" + SampleAppUtilities.generateUUId();
            latestProcessor = new PhotoIDMatch(
                sessionToken, SampleApp, startAdditionalValidationProcess, startInIFrameMode, documentMinMatchLevel,
                loadSelfieImage, loadDocumentImages, loadOcrResult, loadLivenessCheckResponseBody,
                loadMatchResponseBodyFront, loadMatchResponseBodyBack);
        });
    }

    // Function to process only Dni OCR Data (/match-3d-2d-idscan)
    function onPhotoIDMatchOnlyDocumentsProcess(callback, enrollmentIdentifier, startInIFrameMode, documentMinMatchLevel,
                                                latestValidationResult) {
        initializeResultObjects();
        validationCallback = callback;
        SampleAppUtilities.fadeOutMainUIAndPrepareForSession();
        // Get a Session Token from the FaceTec SDK, then start the 3D Liveness Check.  On Success, ID Scanning will start automatically.
        getSessionToken(function (sessionToken) {
            latestEnrollmentIdentifier = enrollmentIdentifier;
            loadSelfieImage(latestValidationResult.selfieImage);
            loadLivenessCheckResponseBody(latestValidationResult.serviceResponses.livenessCheck);
            loadBiometricValidationResponseBody(latestValidationResult.serviceResponses.governmentBiometricValidation);
            latestProcessor = new PhotoIDMatchOnlyDocuments(
                sessionToken, SampleApp, startInIFrameMode, documentMinMatchLevel,
                loadDocumentImages, loadOcrResult, loadMatchResponseBodyFront, loadMatchResponseBodyBack);
        });
    }

    // Function to validate 3D map with selfie picture (/match-3d-2d-face-portrait)
    function match3dMapWithSelfie(base64SelfiePicture, facialAuthMinMatchLevel, matchPictureCallback, sessionResult,
                                  faceScanResultCallback, proceedToNextStepCallback) {
        var _this = this;
        this.latestSessionResult = sessionResult;
        if (sessionResult.status !== FaceTecSDK.FaceTecSessionStatus.SessionCompletedSuccessfully) {
            console.log("Session was not completed successfully, cancelling.  Session Status: " + FaceTecSDK.FaceTecSessionStatus[sessionResult.status]);
            this.latestNetworkRequest.abort();
            faceScanResultCallback.cancel();
            return;
        }
        console.log("facialAuthMinMatchLevel", facialAuthMinMatchLevel);
        var MinMatchLevel = facialAuthMinMatchLevel;
        var parameters = {
            externalDatabaseRefID: latestEnrollmentIdentifier,
            image: base64SelfiePicture,
            minMatchLevel: MinMatchLevel
        };
        // console.log("/match-3d-2d-face-portrait request", parameters);
        this.latestNetworkRequest = new XMLHttpRequest();
        this.latestNetworkRequest.open("POST", Config.BaseURL + "/match-3d-2d-face-portrait");
        this.latestNetworkRequest.setRequestHeader("Content-Type", "application/json");
        this.latestNetworkRequest.setRequestHeader("X-Device-Key", Config.DeviceKeyIdentifier);
        this.latestNetworkRequest.setRequestHeader("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(sessionResult.sessionId));
        this.latestNetworkRequest.onreadystatechange = function () {
            if (_this.latestNetworkRequest.readyState === XMLHttpRequest.DONE) {
                try {
                    const responseJSON = JSON.parse(_this.latestNetworkRequest.responseText);
                    // console.log("/match-3d-2d-face-portrait response", responseJSON);
                    loadBiometricValidationResponseBody(responseJSON);
                    if (responseJSON.wasProcessed === true) {
                        if (responseJSON.success === true && responseJSON.matchLevel >= MinMatchLevel) {
                            const validationResponse = generateValidationResponse(sessionResult, null);
                            matchPictureCallback(validationResponse, true, proceedToNextStepCallback);
                        } else {
                            matchPictureCallback(null, false, faceScanResultCallback.cancel);
                        }
                    } else {
                        console.log("Unexpected API response, cancelling out.");
                        matchPictureCallback(null, false, faceScanResultCallback.cancel);
                    }
                } catch (_a) {
                    console.log("Exception while handling API response, cancelling out.");
                    matchPictureCallback(null, false, faceScanResultCallback.cancel);
                }
            }
        };
        this.latestNetworkRequest.onerror = function () {
            console.log("XHR error, cancelling.");
            matchPictureCallback(false, faceScanResultCallback.cancel);
        };
        var jsonStringToUpload = JSON.stringify(parameters);
        this.latestNetworkRequest.send(jsonStringToUpload);
    }

    // Function to consume profile service from facetec (/match-3d-2d-3rdparty-idphoto")
    function match3dMapWithProfilePicture(base64DniPicture, minMatchLevel, matchPictureCallback, sessionResult,
                                          faceScanResultCallback, proceedToNextStepCallback) {
        var _this = this;
        this.latestSessionResult = sessionResult;
        if (sessionResult.status !== FaceTecSDK.FaceTecSessionStatus.SessionCompletedSuccessfully) {
            console.log("Session was not completed successfully, cancelling.  Session Status: " + FaceTecSDK.FaceTecSessionStatus[sessionResult.status]);
            this.latestNetworkRequest.abort();
            faceScanResultCallback.cancel();
            return;
        }
        // console.log("SessionResult", sessionResult);
        const parameters = {
            externalDatabaseRefID: latestEnrollmentIdentifier,
            image: base64DniPicture,
            minMatchLevel: minMatchLevel
        };
        // console.log("/match-3d-2d-3rdparty-idphoto request", parameters);
        this.latestNetworkRequest = new XMLHttpRequest();
        this.latestNetworkRequest.open("POST", Config.BaseURL + "/match-3d-2d-3rdparty-idphoto");
        this.latestNetworkRequest.setRequestHeader("Content-Type", "application/json");
        this.latestNetworkRequest.setRequestHeader("X-Device-Key", Config.DeviceKeyIdentifier);
        this.latestNetworkRequest.setRequestHeader("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(sessionResult.sessionId));
        this.latestNetworkRequest.onreadystatechange = function () {
            if (_this.latestNetworkRequest.readyState === XMLHttpRequest.DONE) {
                try {
                    const responseJSON = JSON.parse(_this.latestNetworkRequest.responseText);
                    // console.log("/match-3d-2d-3rdparty-idphoto response", responseJSON);
                    loadBiometricValidationResponseBody(responseJSON);
                    if (responseJSON.wasProcessed === true) {
                        if (responseJSON.success === true && responseJSON.matchLevel >= minMatchLevel) {
                            const validationResponse = generateValidationResponse(sessionResult, null);
                            matchPictureCallback(validationResponse, true, proceedToNextStepCallback);
                        } else {
                            matchPictureCallback(null, false, faceScanResultCallback.cancel);
                        }
                    } else {
                        console.log("Unexpected API response, cancelling out.");
                        matchPictureCallback(null, false, faceScanResultCallback.cancel);
                    }
                } catch (_a) {
                    console.log("Exception while handling API response, cancelling out.");
                    matchPictureCallback(null, false, faceScanResultCallback.cancel);
                }
            }
        };
        this.latestNetworkRequest.onerror = function () {
            console.log("XHR error, cancelling.");
            matchPictureCallback(null, false, faceScanResultCallback.cancel);
        };
        const jsonStringToUpload = JSON.stringify(parameters);
        this.latestNetworkRequest.send(jsonStringToUpload);
    }

    // Function to consume profile service from facetec (/match-3d-2d-3rdparty-idphoto-low-quality")
    function match3dMapWithSegipProfilePictureLowQuality(base64SegipPicture, segipMinMatchLevel, matchPictureCallback, sessionResult,
                                                         faceScanResultCallback, proceedToNextStepCallback) {
        var _this = this;
        this.latestSessionResult = sessionResult;
        if (sessionResult.status !== FaceTecSDK.FaceTecSessionStatus.SessionCompletedSuccessfully) {
            console.log("Session was not completed successfully, cancelling.  Session Status: " + FaceTecSDK.FaceTecSessionStatus[sessionResult.status]);
            this.latestNetworkRequest.abort();
            faceScanResultCallback.cancel();
            return;
        }
        const MinMatchLevel = segipMinMatchLevel;
        // console.log("SessionResult", sessionResult);
        const parameters = {
            externalDatabaseRefID: latestEnrollmentIdentifier,
            image: base64SegipPicture,
            minMatchLevel: MinMatchLevel
        };
        // console.log("/match-3d-2d-3rdparty-idphoto-low-quality request", parameters);
        this.latestNetworkRequest = new XMLHttpRequest();
        this.latestNetworkRequest.open("POST", Config.BaseURL + "/match-3d-2d-3rdparty-idphoto-low-quality");
        this.latestNetworkRequest.setRequestHeader("Content-Type", "application/json");
        this.latestNetworkRequest.setRequestHeader("X-Device-Key", Config.DeviceKeyIdentifier);
        this.latestNetworkRequest.setRequestHeader("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(sessionResult.sessionId));
        this.latestNetworkRequest.onreadystatechange = function () {
            if (_this.latestNetworkRequest.readyState === XMLHttpRequest.DONE) {
                try {
                    const responseJSON = JSON.parse(_this.latestNetworkRequest.responseText);
                    // console.log("/match-3d-2d-3rdparty-idphoto-low-quality response", responseJSON);
                    loadBiometricValidationResponseBody(responseJSON);
                    if (responseJSON.wasProcessed === true) {
                        if (responseJSON.success === true && responseJSON.matchLevel >= MinMatchLevel) {
                            const validationResponse = generateValidationResponse(sessionResult, null);
                            matchPictureCallback(validationResponse, true, proceedToNextStepCallback);
                        } else {
                            matchPictureCallback(null, false, faceScanResultCallback.cancel);
                        }
                    } else {
                        console.log("Unexpected API response, cancelling out.");
                        matchPictureCallback(null, false, faceScanResultCallback.cancel);
                    }
                } catch (_a) {
                    console.log("Exception while handling API response, cancelling out.");
                    matchPictureCallback(null, false, faceScanResultCallback.cancel);
                }
            }
        };
        this.latestNetworkRequest.onerror = function () {
            console.log("XHR error, cancelling.");
            matchPictureCallback(null, false, faceScanResultCallback.cancel);
        };
        const jsonStringToUpload = JSON.stringify(parameters);
        this.latestNetworkRequest.send(jsonStringToUpload);
    }

    // Function to validate 2D dni photo to 2D segip picture (/match-2d-2d)
    function matchSelfieWithSegipProfilePicture(base64SelfiePicture, base64SegipPicture, segipMinMatchLevel,
                                                matchPictureCallback, sessionResult, faceScanResultCallback,
                                                proceedToNextStepCallback) {
        var _this = this;
        this.latestSessionResult = sessionResult;
        if (sessionResult.status !== FaceTecSDK.FaceTecSessionStatus.SessionCompletedSuccessfully) {
            console.log("Session was not completed successfully, cancelling.  Session Status: " + FaceTecSDK.FaceTecSessionStatus[sessionResult.status]);
            this.latestNetworkRequest.abort();
            faceScanResultCallback.cancel();
            return;
        }
        // console.log("SessionResult", sessionResult);
        const MinMatchLevel = segipMinMatchLevel;
        const parameters = {
            image0: base64SegipPicture,
            image1: base64SelfiePicture,
            minMatchLevel: MinMatchLevel
        };
        // console.log("/match-2d-2d request", parameters);
        this.latestNetworkRequest = new XMLHttpRequest();
        this.latestNetworkRequest.open("POST", Config.BaseURL + "/match-2d-2d");
        this.latestNetworkRequest.setRequestHeader("Content-Type", "application/json");
        this.latestNetworkRequest.setRequestHeader("X-Device-Key", Config.DeviceKeyIdentifier);
        this.latestNetworkRequest.setRequestHeader("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(sessionResult.sessionId));
        this.latestNetworkRequest.onreadystatechange = function () {
            if (_this.latestNetworkRequest.readyState === XMLHttpRequest.DONE) {
                try {
                    const responseJSON = JSON.parse(_this.latestNetworkRequest.responseText);
                    //console.log("/match-2d-2d response", responseJSON);
                    loadBiometricValidationResponseBody(responseJSON);
                    if (responseJSON.wasProcessed === true) {
                        if (responseJSON.success === true && responseJSON.matchLevel >= MinMatchLevel) {
                            const validationResponse = generateValidationResponse(sessionResult, null);
                            matchPictureCallback(validationResponse, true, proceedToNextStepCallback);
                        } else {
                            matchPictureCallback(null, false, faceScanResultCallback.cancel);
                        }
                    } else {
                        console.log("Unexpected API response, cancelling out.");
                        matchPictureCallback(null, false, faceScanResultCallback.cancel);
                    }
                } catch (_a) {
                    console.log("Exception while handling API response, cancelling out.");
                    matchPictureCallback(null, false, faceScanResultCallback.cancel);
                }
            }
        };
        this.latestNetworkRequest.onerror = function () {
            console.log("XHR error, cancelling.");
            matchPictureCallback(null, false, faceScanResultCallback.cancel);
        };
        const jsonStringToUpload = JSON.stringify(parameters);
        this.latestNetworkRequest.send(jsonStringToUpload);
    }

    function loadSelfieImage(selfieImageResponse) {
        selfieImage = selfieImageResponse;
    }

    function loadLivenessCheckResponseBody(livenessCheckResponse) {
        livenessCheckResponseBody = livenessCheckResponse;
    }

    function loadBiometricValidationResponseBody(biometricValidationResponse) {
        biometricValidationResponseBody = biometricValidationResponse
    }

    function loadDocumentImages(frontDocumentImageResponse, backDocumentImageResponse) {
        frontDocumentImage = frontDocumentImageResponse;
        backDocumentImage = backDocumentImageResponse;
    }

    function loadOcrResult(ocrResultResponse) {
        ocrResult = ocrResultResponse;
    }

    function loadMatchResponseBodyFront(matchResponseFront) {
        matchResponseBodyFront = matchResponseFront;
    }

    function loadMatchResponseBodyBack(matchResponseBack) {
        matchResponseBodyBack = matchResponseBack;
    }

    // Show the final result with the Session Review Screen.
    var onComplete;
    onComplete = function (sessionResult, idScanResult, latestNetworkResponseStatus) {
        latestSessionResult = sessionResult;
        latestIDScanResult = idScanResult;
        if (latestProcessor.isSuccess()) {
            // Display message to user, Success messages are already logged from the processors.
            DeveloperStatusMessages.displayMessage("See logs for details");
        } else {
            // Log result for unSuccess Sessions.
            DeveloperStatusMessages.logScanOncompleteResult(sessionResult, idScanResult);
            // Check for server offline
            if (isNetworkResponseServerIsOffline(latestNetworkResponseStatus) === true) {
                showAdditionalScreensServerIsDown();
                return;
            }
        }
        SampleAppUtilities.showMainUI();
        sendValidationResultToBackend(sessionResult, idScanResult, latestNetworkResponseStatus);
    };

    function sendValidationResultToBackend(sessionResult, idScanResult, latestNetworkResponseStatus) {
        const validationResult = generateValidationResponse(sessionResult, idScanResult);
        //console.log(sessionResult, idScanResult, latestNetworkResponseStatus, validationResult)
        validationCallback(sessionResult, idScanResult, latestNetworkResponseStatus, validationResult);
    }

    function generateValidationResponse(sessionResult, idScanResult) {
        latestSessionResult = sessionResult;
        latestIDScanResult = idScanResult;
        let message = latestProcessor.isSuccess() ? "Validation process completed successfully" : "Identity validation failed";
        if (latestSessionResult) {
            switch (latestSessionResult.status) {
                case 3:
                    message = "Identity validation failed. Reason: ContextSwitch";
                    break;
                case 7:
                    message = "Identity validation failed. Reason: UserCancelled";
                    break;
                case 11:
                    message = "Identity validation failed. Reason: Too many tries. Component LockedOut";
                    break;
            }
        }
        if (latestIDScanResult && latestIDScanResult.status === 2) {
            message = "Identity validation failed. Reason: ID Scan was not completed successfully";
        }
        let validationStatus;
        if (latestSessionResult != null) {
            validationStatus = latestSessionResult.status;
        } else {
            validationStatus = latestIDScanResult.status;
        }
        return {
            backDocumentImage: backDocumentImage,
            frontDocumentImage: frontDocumentImage,
            latestServiceResponse: getLatestServiceResponse(),
            message: message,
            ocrResult: ocrResult,
            selfieImage: selfieImage,
            serviceResponses: {
                selfieImage: selfieImage,
                livenessCheck: getCleanedLivenessCheckResponseBody(),
                governmentBiometricValidation: getCleanedBiometricValidationResponseBody(),
                matchResponseFront: getCleanedMatchResponseBodyFront(),
                matchResponseBack: getCleanedMatchResponseBodyBack()
            },
            status: validationStatus,
            success: latestProcessor.isSuccess()
        };
    }

    function getLatestServiceResponse() {
        if (livenessCheckResponseBody) {
            return livenessCheckResponseBody;
        }
        if (biometricValidationResponseBody) {
            return biometricValidationResponseBody;
        }
        if (matchResponseBodyFront) {
            return matchResponseBodyFront;
        }
        if (matchResponseBodyBack) {
            return matchResponseBodyBack;
        }
        return null;
    }

    function getCleanedLivenessCheckResponseBody() {
        // console.log("livenessCheckResponseBody", livenessCheckResponseBody);
        if (livenessCheckResponseBody) {
            return {
                callData: livenessCheckResponseBody.callData,
                externalDatabaseRefID: livenessCheckResponseBody.externalDatabaseRefID,
                success: livenessCheckResponseBody.success,
                wasProcessed: livenessCheckResponseBody.wasProcessed
            };
        } else {
            return null;
        }
    }

    function getCleanedBiometricValidationResponseBody() {
        // console.log("biometricValidationResponseBody", biometricValidationResponseBody);
        if (biometricValidationResponseBody) {
            return {
                callData: biometricValidationResponseBody.callData,
                externalDatabaseRefID: biometricValidationResponseBody.externalDatabaseRefID,
                matchLevel: biometricValidationResponseBody.matchLevel,
                success: biometricValidationResponseBody.success,
                wasProcessed: biometricValidationResponseBody.wasProcessed
            };
        } else {
            return null;
        }
    }

    function getCleanedMatchResponseBodyFront() {
        // console.log("matchResponseBodyFront", matchResponseBodyFront);
        if (matchResponseBodyFront) {
            return {
                callData: matchResponseBodyFront.callData,
                documentData: matchResponseBodyFront.documentData,
                externalDatabaseRefID: matchResponseBodyFront.externalDatabaseRefID,
                matchLevel: matchResponseBodyFront.matchLevel,
                success: matchResponseBodyFront.success,
                wasProcessed: matchResponseBodyFront.wasProcessed
            };
        } else {
            return null;
        }
    }

    function getCleanedMatchResponseBodyBack() {
        // console.log("matchResponseBodyBack", matchResponseBodyBack);
        if (matchResponseBodyBack) {
            return {
                callData: matchResponseBodyBack.callData,
                documentData: matchResponseBodyBack.documentData,
                externalDatabaseRefID: matchResponseBodyBack.externalDatabaseRefID,
                matchLevel: matchResponseBodyBack.matchLevel,
                success: matchResponseBodyBack.success,
                wasProcessed: matchResponseBodyBack.wasProcessed
            };
        } else {
            return null;
        }
    }

    // Check for server down status
    function isNetworkResponseServerIsOffline(networkResponseStatus) {
        return (networkResponseStatus >= 500);
    }

    // Set a new customization for FaceTec Browser SDK.
    function onDesignShowcasePressed() {
        ThemeHelpers.showNewTheme();
    }

    function onVocalGuidanceSettingsButtonPressed() {
        SampleAppUtilities.setVocalGuidanceMode();
    }

    // Display audit trail images captured from user's last FaceTec Browser SDK Session (if available).
    function onViewAuditTrailPressed() {
        SampleAppUtilities.showAuditTrailImages(latestSessionResult, latestIDScanResult);
    }

    var sessionTokenErrorHasBeenHandled = false;

    function onSessionTokenError(xhrStatus) {
        if (sessionTokenErrorHasBeenHandled === false) {
            sessionTokenErrorHasBeenHandled = true;
            if (xhrStatus !== undefined && isNetworkResponseServerIsOffline(xhrStatus)) {
                showAdditionalScreensServerIsDown();
            } else {
                onServerSessionTokenError();
            }
        }
    }

    // Get the Session Token from the server
    function getSessionToken(sessionTokenCallback) {
        sessionTokenErrorHasBeenHandled = false;
        try {
            var XHR = new XMLHttpRequest();
            XHR.open("GET", Config.BaseURL + "/session-token");
            XHR.setRequestHeader("X-Device-Key", Config.DeviceKeyIdentifier);
            XHR.setRequestHeader("X-User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""));
            XHR.onreadystatechange = function () {
                if (this.readyState === XMLHttpRequest.DONE) {
                    var sessionToken = "";
                    try {
                        // Attempt to get the sessionToken from the response object.
                        sessionToken = JSON.parse(this.responseText).sessionToken;
                        // Something went wrong in parsing the response. Return an error.
                        if (typeof sessionToken !== "string") {
                            onSessionTokenError(XHR.status);
                            return;
                        }
                    } catch (_a) {
                        // Something went wrong in parsing the response. Return an error.
                        XHR.abort();
                        onSessionTokenError(XHR.status);
                        return;
                    }
                    SampleAppUtilities.hideLoadingSessionToken();
                    sessionTokenCallback(sessionToken);
                }
            };
            // Wait 3s, if the request is not completed yet, show the session token loading screen
            window.setTimeout(function () {
                if (XHR.readyState !== XMLHttpRequest.DONE) {
                    if (sessionTokenErrorHasBeenHandled === false) {
                        SampleAppUtilities.showLoadingSessionToken();
                    }
                }
            }, 3000);
            XHR.onerror = function () {
                XHR.abort();
                onSessionTokenError(XHR.status);
            };
            XHR.send();
        } catch (e) {
            onSessionTokenError(undefined);
        }
    }

    function showAdditionalScreensServerIsDown() {
        AdditionalScreens.showServerUpGradeView();
    }

    function onServerSessionTokenError() {
        SampleAppUtilities.handleErrorGettingServerSessionToken();
    }

    var getLatestEnrollmentIdentifier = function () {
        return latestEnrollmentIdentifier;
    };
    var clearLatestEnrollmentIdentifier = function () {
        latestEnrollmentIdentifier = "";
    };

    function exitAdditionalScreen() {
        AdditionalScreens.exitAdditionalScreen(SampleAppUtilities.showMainUI);
    }

    return {
        initializeComponent: initializeComponent,
        startValidationProcess: startValidationProcess,
        onLivenessCheckPressed: onLivenessCheckPressed,
        onEnrollUserPressed: onEnrollUserPressed,
        onAuthenticateUserPressed: onAuthenticateUserPressed,
        onPhotoIDMatchPressed: onPhotoIDMatchPressed,
        onPhotoIDScanPressed: onPhotoIDScanPressed,
        onDesignShowcasePressed: onDesignShowcasePressed,
        match3dMapWithSelfie: match3dMapWithSelfie,
        match3dMapWithProfilePicture: match3dMapWithProfilePicture,
        match3dMapWithSegipProfilePictureLowQuality: match3dMapWithSegipProfilePictureLowQuality,
        matchSelfieWithSegipProfilePicture: matchSelfieWithSegipProfilePicture,
        onComplete: onComplete,
        generateValidationResponse: generateValidationResponse,
        sendValidationResultToBackend: sendValidationResultToBackend,
        getLatestEnrollmentIdentifier: getLatestEnrollmentIdentifier,
        clearLatestEnrollmentIdentifier: clearLatestEnrollmentIdentifier,
        onVocalGuidanceSettingsButtonPressed: onVocalGuidanceSettingsButtonPressed,
        onViewAuditTrailPressed: onViewAuditTrailPressed,
        latestSessionResult: latestSessionResult,
        latestIDScanResult: latestIDScanResult
    };
})();
